あなたにAtCoder Heuristic Contestのビジュアライザ・入力ジェネレーターの作成をお願いしたいです。
システムはReact + Rustによるwasmで構成されていて、概ね以下のような担当分けになっています:
React側: seed値・outputをtextareaから受け付けて、Rustに送る・Rustから受け取った入力ファイルをTextAreaに表示・Rustから受け取ったsvgを表示
Rust側: Reactから渡されたものに対して処理を行う: 
具体的には、
- seedの値に基づいて入力ファイルの作成
- 与えられた出力に基づいてビジュアライザの作成(svgの描画)、ターンごと
- 入力・出力を受け取って、最大のターン数を返す
ことを行なっています。
以下のコードはRust側の例で、インターフェースを変えずに(つまり、lib.rsの内容をほぼ変えずに)、別のコンテスト用のビジュアライザシステムの開発を行いたいです:

[lib.rs]
use wasm_bindgen::prelude::*;
mod util;

#[wasm_bindgen]
pub fn gen(seed: i32) -> String {
    util::gen(seed as u64).to_string()
}

#[wasm_bindgen(getter_with_clone)]
pub struct Ret {
    pub score: i64,
    pub err: String,
    pub svg: String,
}

#[wasm_bindgen]
pub fn vis(_input: String, _output: String, turn: usize) -> Ret {
    let input = util::parse_input(&_input);
    let output = util::parse_output(&_output);
    let (score, err, svg) = util::vis(&input, &output, turn);
    Ret {
        score: score as i64,
        err,
        svg,
    }
}

#[wasm_bindgen]
pub fn get_max_turn(_input: String, _output: String) -> usize {
    let output = util::parse_output(&_output);
    output.q
}

[util.rs]
#![allow(non_snake_case, unused_macros)]
use proconio::input;
use rand::prelude::*;
use std::collections::VecDeque;
use svg::node::element::{Rectangle, Style};
use web_sys::console::log_1;

pub trait SetMinMax {
    fn setmin(&mut self, v: Self) -> bool;
    fn setmax(&mut self, v: Self) -> bool;
}
impl<T> SetMinMax for T
where
    T: PartialOrd,
{
    fn setmin(&mut self, v: T) -> bool {
        *self > v && {
            *self = v;
            true
        }
    }
    fn setmax(&mut self, v: T) -> bool {
        *self < v && {
            *self = v;
            true
        }
    }
}

#[derive(Clone, Debug)]
pub struct Input {
    pub id: usize,
    pub n: usize,
    pub k: usize,
    pub s: Vec<String>,
}

impl std::fmt::Display for Input {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        writeln!(f, "{} {} {}", self.id, self.n, self.k)?;
        for i in 0..self.n {
            writeln!(f, "{}", self.s[i])?;
        }
        Ok(())
    }
}

pub fn parse_input(f: &str) -> Input {
    let f = proconio::source::once::OnceSource::from(f);
    input! {
        from f,
        id:usize,
        n: usize,
        k: usize,
        s: [String; n]
    }
    Input { id, n, k, s }
}

pub struct Output {
    pub q: usize,
    pub yxc: Vec<(usize, usize, usize)>,
}

pub fn parse_output(f: &str) -> Output {
    let f = proconio::source::once::OnceSource::from(f);
    input! {
        from f,
        q: usize,
        yxc: [(usize, usize, usize); q]
    }
    Output { q, yxc }
}

pub fn gen(seed: u64) -> Input {
    let mut rng = rand_chacha::ChaCha20Rng::seed_from_u64(seed);
    let id = seed;
    let n = 100;
    let k = 9;
    let s = (0..n)
        .map(|_| {
            (0..n)
                .map(|_| rng.gen_range(1..k + 1).to_string())
                .collect::<String>()
        })
        .collect::<Vec<_>>();
    Input { id: 0, n, k, s }
}

fn calculate_score(input: &Input, yxc: &Vec<(usize, usize, usize)>) -> (usize, Vec<Vec<usize>>) {
    let mut state = vec![vec![0; input.n]; input.n];
    input.s.iter().enumerate().for_each(|(y, s)| {
        s.chars()
            .enumerate()
            .for_each(|(x, c)| state[y][x] = c.to_digit(10).unwrap() as usize)
    });

    let x_vec: Vec<i32> = vec![0, 1, 0, -1];
    let y_vec: Vec<i32> = vec![-1, 0, 1, 0];

    for (y, x, c) in yxc {
        // state[*y][*x] = *c;
        let selected_color = state[*y - 1][*x - 1];

        let mut visited = vec![vec![false; input.n]; input.n];
        let mut queue: VecDeque<(usize, usize)> = VecDeque::new();
        queue.push_back((*y - 1, *x - 1));

        let mut count = 0;

        while queue.len() > 0 {
            let (ypos, xpos) = queue.pop_front().unwrap();
            if visited[ypos][xpos] {
                continue;
            }
            visited[ypos][xpos] = true;
            state[ypos][xpos] = *c;

            count = count + 1;
            for i in 0..4 {
                let nx = xpos as i32 + x_vec[i];
                let ny = ypos as i32 + y_vec[i];
                if nx < 0 || ny < 0 || nx >= input.n as i32 || ny >= input.n as i32 {
                    continue;
                }
                let nx = nx as usize;
                let ny = ny as usize;
                if visited[ny][nx] {
                    continue;
                }

                if state[ny][nx] != selected_color {
                    continue;
                }
                queue.push_back((ny, nx));
            }
        }
    }

    let mut score = 0;
    for color in 1..(input.k + 1) {
        let mut tmp_score = 0;
        for y in 0..input.n {
            for x in 0..input.n {
                if state[y][x] == color {
                    tmp_score += 100;
                }
            }
        }
        score = score.max(tmp_score);
    }
    score -= yxc.len();

    return (score, state);
}

fn generate_dark_color(code: usize) -> String {
    // 入力値に基づいてHue（色相）を計算
    let hue = (code as f32 * 36.0) % 360.0;

    // Saturation（彩度）を低めに、Lightness（明度）を固定値で低く設定
    let saturation = 30.0;
    let lightness = 30.0;

    // HSL to RGB 変換
    let hue_normalized = hue / 360.0;
    let q = if lightness < 0.5 {
        lightness * (1.0 + saturation)
    } else {
        lightness + saturation - (lightness * saturation)
    };

    let p = 2.0 * lightness - q;

    let r = hue_to_rgb(p, q, hue_normalized + 1.0 / 3.0);
    let g = hue_to_rgb(p, q, hue_normalized);
    let b = hue_to_rgb(p, q, hue_normalized - 1.0 / 3.0);

    // RGB を 16 進数に変換して文字列を返す
    format!(
        "#{:02X}{:02X}{:02X}",
        (r * 255.0) as u8,
        (g * 255.0) as u8,
        (b * 255.0) as u8
    )
}

fn generate_color(code: usize) -> String {
    // 入力値に基づいてHue（色相）を計算
    let hue = (code as f32 * 36.0) % 360.0;

    // Saturation（彩度）とLightness（明度）を固定値で設定
    let saturation = 10.0;
    let lightness = 0.1;

    // HSL to RGB 変換
    let hue_normalized = hue / 360.0;
    let q = if lightness < 0.5 {
        lightness * (1.0 + saturation)
    } else {
        lightness + saturation - (lightness * saturation)
    };

    let p = 2.0 * lightness - q;

    let r = hue_to_rgb(p, q, hue_normalized + 1.0 / 3.0);
    let g = hue_to_rgb(p, q, hue_normalized);
    let b = hue_to_rgb(p, q, hue_normalized - 1.0 / 3.0);

    // RGB を 16 進数に変換して文字列を返す
    format!(
        "#{:02X}{:02X}{:02X}",
        (r * 255.0) as u8,
        (g * 255.0) as u8,
        (b * 255.0) as u8
    )
}

fn hue_to_rgb(p: f32, q: f32, t: f32) -> f32 {
    let t = if t < 0.0 {
        t + 1.0
    } else if t > 1.0 {
        t - 1.0
    } else {
        t
    };

    if t < 1.0 / 6.0 {
        p + (q - p) * 6.0 * t
    } else if t < 1.0 / 2.0 {
        q
    } else if t < 2.0 / 3.0 {
        p + (q - p) * (2.0 / 3.0 - t) * 6.0
    } else {
        p
    }
}

pub fn rect(x: usize, y: usize, w: usize, h: usize, fill: &str) -> Rectangle {
    Rectangle::new()
        .set("x", x)
        .set("y", y)
        .set("width", w)
        .set("height", h)
        .set("fill", fill)
}

pub fn vis(input: &Input, output: &Output, turn: usize) -> (i64, String, String) {
    let (score, state) =
        calculate_score(input, &output.yxc[0..turn].into_iter().cloned().collect());

    let W = 800;
    let H = 800;
    let w = 8;
    let h = 8;
    let mut doc = svg::Document::new()
        .set("id", "vis")
        .set("viewBox", (-5, -5, W + 10, H + 10))
        .set("width", W + 10)
        .set("height", H + 10)
        .set("style", "background-color:white");

    doc = doc.add(Style::new(format!(
        "text {{text-anchor: middle;dominant-baseline: central; font-size: {}}}",
        6
    )));
    for y in 0..input.n {
        for x in 0..input.n {
            doc = doc.add(
                rect(
                    x * w,
                    W - (y + 1) * h,
                    w,
                    h,
                    &generate_dark_color(state[y][x]),
                )
                .set("stroke", "black")
                .set("stroke-width", 1)
                .set("class", "box"),
            );
        }
    }

    (score as i64, "".to_string(), doc.to_string())
}


上記の情報を参考にして、この次に与えるAtCoder Heuristic Contestの問題のビジュアライザのためのutil.rsを書いてください。
ただし、元々のutil.rsの構造を大きく変えないで欲しいです:
- Input, Output構造体を作る
- Input,Outputに実装したトレイトは必ず実装する(特にDisplayを忘れがち)
- 適切にコメントを入れる
- 入力生成方法は簡易化せずに厳密に指定に従う必要があります
- 同じlib.rsを使うので、util.rsのインターフェースを変えることは禁止
- Rustのクレートは以下のバージョンのものを使用する:
wasm-bindgen = "0.2.89"
getrandom = {version="0.2", features=["js"]}
rand = { version = "=0.8.5", features = ["small_rng", "min_const_gen"] }
rand_chacha = "=0.3.1"
rand_distr = "=0.4.3"
itertools = "=0.11.0"
proconio = { version = "=0.4.5", features = ["derive"] }
clap = { version = "4.0.22", features = ["derive"] }
svg = "0.17.0"
delaunator = "1.0.1"
web-sys = {"version" = "0.3.44", features=['console']}

ただし、以下のコードを踏襲してInput, Output, genなどを書いてください。

[ツール類]
#![allow(non_snake_case, unused_macros)]

use proconio::input;
use rand::prelude::*;
use std::io::prelude::*;
use std::ops::RangeBounds;

pub trait SetMinMax {
    fn setmin(&mut self, v: Self) -> bool;
    fn setmax(&mut self, v: Self) -> bool;
}
impl<T> SetMinMax for T
where
    T: PartialOrd,
{
    fn setmin(&mut self, v: T) -> bool {
        *self > v && {
            *self = v;
            true
        }
    }
    fn setmax(&mut self, v: T) -> bool {
        *self < v && {
            *self = v;
            true
        }
    }
}

#[macro_export]
macro_rules! mat {
	($($e:expr),*) => { Vec::from(vec![$($e),*]) };
	($($e:expr,)*) => { Vec::from(vec![$($e),*]) };
	($e:expr; $d:expr) => { Vec::from(vec![$e; $d]) };
	($e:expr; $d:expr $(; $ds:expr)+) => { Vec::from(vec![mat![$e $(; $ds)*]; $d]) };
}

const MAX_T: usize = 5000;

#[derive(Clone, Debug)]
pub struct Input {
    pub eps: f64,
    pub delta: f64,
    pub s: (i64, i64),
    pub ps: Vec<(i64, i64)>,
    pub walls: Vec<(i64, i64, i64, i64)>,
    pub fs: Vec<(i64, i64)>,
    pub alphas: Vec<f64>,
}

impl std::fmt::Display for Input {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        writeln!(f, "{} {} {:.2} {:.2}", self.ps.len(), self.walls.len(), self.eps, self.delta)?;
        writeln!(f, "{} {}", self.s.0, self.s.1)?;
        for i in 0..self.ps.len() {
            writeln!(f, "{} {}", self.ps[i].0, self.ps[i].1)?;
        }
        for i in 0..self.walls.len() {
            writeln!(
                f,
                "{} {} {} {}",
                self.walls[i].0, self.walls[i].1, self.walls[i].2, self.walls[i].3
            )?;
        }
        for i in 0..MAX_T {
            writeln!(f, "{}", self.alphas[i])?;
        }
        for i in 0..MAX_T {
            writeln!(f, "{} {}", self.fs[i].0, self.fs[i].1)?;
        }
        Ok(())
    }
}

pub fn parse_input(f: &str) -> Input {
    let f = proconio::source::once::OnceSource::from(f);
    input! {
        from f,
        N: usize, M: usize, eps: f64, delta: f64,
        s: (i64, i64),
        ps: [(i64, i64); N],
        walls: [(i64, i64, i64, i64); M],
        alphas: [f64; MAX_T],
        fs: [(i64, i64); MAX_T],
    }
    Input {
        eps,
        delta,
        s,
        ps,
        walls,
        fs,
        alphas,
    }
}

pub fn read<T: Copy + PartialOrd + std::fmt::Display + std::str::FromStr, R: RangeBounds<T>>(
    token: Option<&str>,
    range: R,
) -> Result<T, String> {
    if let Some(v) = token {
        if let Ok(v) = v.parse::<T>() {
            if !range.contains(&v) {
                Err(format!("Out of range: {}", v))
            } else {
                Ok(v)
            }
        } else {
            Err(format!("Parse error: {}", v))
        }
    } else {
        Err("Unexpected EOF".to_owned())
    }
}

pub struct Output {
    pub out: Vec<(char, i64, i64)>,
}

pub fn parse_output(_input: &Input, f: &str) -> Result<Output, String> {
    let mut out = vec![];
    for line in f.lines() {
        if line.starts_with('#') {
            continue;
        }
        let mut it = line.split_whitespace();
        let a = read(it.next(), 'A'..'Z')?;
        let x = read(it.next(), -100000..=100000)?;
        let y = read(it.next(), -100000..=100000)?;
        if a != 'A' && a != 'S' {
            return Err(format!("Invalid action: {}", a));
        } else if a == 'A' && x * x + y * y > 500 * 500 {
            return Err(format!("Out of range: ({}, {})", x, y));
        } else if a == 'S' && x * x + y * y > 10000000000 {
            return Err(format!("Out of range: ({}, {})", x, y));
        } else if a == 'S' && (x, y) == (0, 0) {
            return Err(format!("Out of range: ({}, {})", x, y));
        }
        out.push((a, x, y));
    }
    if out.len() > MAX_T {
        return Err(format!("Too many actions: {}", out.len()));
    }
    Ok(Output { out })
}

pub fn gen(seed: u64, problem: char) -> Input {
    let mut rng = rand_chacha::ChaCha20Rng::seed_from_u64(seed);
    let N = 10;
    let (M, eps, delta) = match problem {
        'A' => (0, rng.gen_range(1..=100) as f64, rng.gen_range(1..=20) as f64 * 0.01),
        'B' => (10, rng.gen_range(0..=1) as f64, 0.01),
        'C' => (
            rng.gen_range(1..=10i32) as usize,
            rng.gen_range(1..=100) as f64,
            rng.gen_range(1..=20) as f64 * 0.01,
        ),
        _ => {
            panic!("Unknown problem: {}", problem)
        }
    };
    let s = (rng.gen_range(-99999..=99999), rng.gen_range(-99999..=99999));
    let mut ps: Vec<(i64, i64)> = vec![];
    while ps.len() < N {
        let p = (rng.gen_range(-100000..=100000), rng.gen_range(-100000..=100000));
        if ps
            .iter()
            .chain(&[s])
            .any(|&q| (p.0 - q.0) * (p.0 - q.0) + (p.1 - q.1) * (p.1 - q.1) < 5000 * 5000)
        {
            continue;
        }
        ps.push(p);
    }
    let mut walls: Vec<(i64, i64, i64, i64)> = vec![];
    while walls.len() < M {
        let x1 = rng.gen_range(-90000..=90000);
        let y1 = rng.gen_range(-90000..=90000);
        let x2 = x1 + rng.gen_range(-100000..=100000);
        let y2 = y1 + rng.gen_range(-100000..=100000);
        if (x2 < -100000 || 100000 < x2) && (y2 < -100000 || 100000 < y2) || (x2, y2) == (0, 0) {
            continue;
        }
        let x2 = x2.min(100000).max(-100000);
        let y2 = y2.min(100000).max(-100000);
        if walls.iter().all(|w| {
            !P::crs_ss(
                (P(x1 as f64, y1 as f64), P(x2 as f64, y2 as f64)),
                (P(w.0 as f64, w.1 as f64), P(w.2 as f64, w.3 as f64)),
            )
        }) {
            if !P::crs_sp((P(x1 as f64, y1 as f64), P(x2 as f64, y2 as f64)), P(s.0 as f64, s.1 as f64)) {
                walls.push((x1, y1, x2, y2));
            }
        }
    }
    let alphas = (0..MAX_T)
        .map(|_| loop {
            let t = 1.0 + rng.sample::<f64, _>(rand_distr::StandardNormal) * delta;
            if t > 0.0 {
                break t;
            }
        })
        .collect();
    let fs = (0..MAX_T)
        .map(|_| {
            (
                (rng.sample::<f64, _>(rand_distr::StandardNormal) * eps).round() as i64,
                (rng.sample::<f64, _>(rand_distr::StandardNormal) * eps).round() as i64,
            )
        })
        .collect();
    Input {
        eps,
        delta,
        s,
        ps,
        walls,
        alphas,
        fs,
    }
}

pub fn compute_score(input: &Input, out: &Output) -> (i64, String) {
    let (mut score, mut err, (_, _, visited)) = compute_score_details(input, &out.out);
    if visited.iter().any(|&b| !b) {
        err = "Unexpected EOF".to_owned();
    }
    if err.len() > 0 {
        score = 0;
    }
    (score, err)
}

struct Sim {
    visited: Vec<bool>,
    score: i64,
    crt_score: i64,
    p: P,
    v: P,
    t: usize,
}

impl Sim {
    fn new(input: &Input) -> Self {
        let visited = vec![false; input.ps.len()];
        let score = 0;
        let crt_score = 0;
        let p = P(input.s.0 as f64, input.s.1 as f64);
        let v = P(0.0, 0.0);
        Self {
            visited,
            score,
            crt_score,
            p,
            v,
            t: 0,
        }
    }
    fn query(&mut self, input: &Input, mv: char, x: i64, y: i64) -> (i32, Vec<usize>, i64) {
        let mut ret = -1;
        match mv {
            'A' => {
                self.v = self.v + P(x as f64, y as f64);
            }
            'S' => {
                let mut d = 1e9;
                for wall in input.walls.iter().chain(
                    [
                        (-100000, -100000, -100000, 100000),
                        (-100000, 100000, 100000, 100000),
                        (100000, 100000, 100000, -100000),
                        (100000, -100000, -100000, -100000),
                    ]
                    .iter(),
                ) {
                    let dir = P(x as f64, y as f64);
                    let w1 = P(wall.0 as f64, wall.1 as f64);
                    let w2 = P(wall.2 as f64, wall.3 as f64);
                    if let Some(p) = P::pi_ll((self.p, self.p + dir), (w1, w2)) {
                        if sig(dir.det(w1 - self.p)) * sig(dir.det(w2 - self.p)) <= 0 && (p - self.p).dot(dir) >= 0.0 {
                            d.setmin((p - self.p).abs2().sqrt());
                        }
                    }
                }
                d *= input.alphas[self.t];
                ret = d.round() as i64;
            }
            _ => {
                unreachable!()
            }
        }
        self.v = self.v + P(input.fs[self.t].0 as f64, input.fs[self.t].1 as f64);
        self.crt_score -= 2;
        self.t += 1;
        let q = self.p + self.v;
        if q.0 < -100000.0
            || 100000.0 < q.0
            || q.1 < -100000.0
            || 100000.0 < q.1
            || input
                .walls
                .iter()
                .any(|&(x1, y1, x2, y2)| P::crs_ss((P(x1 as f64, y1 as f64), P(x2 as f64, y2 as f64)), (self.p, q)))
        {
            self.crt_score -= 100;
            self.v = P(0.0, 0.0);
            return (1, vec![], ret);
        } else {
            let mut hit = vec![];
            for i in 0..input.ps.len() {
                if !self.visited[i] && P::dist2_sp((self.p, q), P(input.ps[i].0 as f64, input.ps[i].1 as f64)) <= 1000000.0 {
                    self.visited[i] = true;
                    self.crt_score += 1000;
                    hit.push(i);
                }
            }
            self.p = q;
            self.score.setmax(self.crt_score);
            (0, hit, ret)
        }
    }
}

pub fn compute_score_details(input: &Input, out: &[(char, i64, i64)]) -> (i64, String, (P, P, Vec<bool>)) {
    let mut sim = Sim::new(input);
    for &(mv, x, y) in out {
        sim.query(input, mv, x, y);
    }
    (sim.score, String::new(), (sim.p, sim.v, sim.visited))
}

use itertools::Itertools;
use std::io::{BufRead, BufReader, Read};
use std::process::ChildStdout;

fn read_line(stdout: &mut BufReader<ChildStdout>, local: bool) -> Result<String, String> {
    loop {
        let mut out = String::new();
        match stdout.read_line(&mut out) {
            Ok(0) | Err(_) => {
                return Err(format!("Your program has terminated unexpectedly"));
            }
            _ => (),
        }
        if local {
            print!("{}", out);
        }
        let v = out.trim();
        if v.len() == 0 || v.starts_with("#") {
            continue;
        }
        return Ok(v.to_owned());
    }
}

pub fn exec(p: &mut std::process::Child, local: bool) -> Result<i64, String> {
    let mut input = String::new();
    std::io::stdin().read_to_string(&mut input).unwrap();
    let input = parse_input(&input);
    let mut stdin = std::io::BufWriter::new(p.stdin.take().unwrap());
    let mut stdout = std::io::BufReader::new(p.stdout.take().unwrap());
    let _ = writeln!(
        stdin,
        "{} {} {:.2} {:.2}",
        input.ps.len(),
        input.walls.len(),
        input.eps,
        input.delta
    );
    let _ = writeln!(stdin, "{} {}", input.s.0, input.s.1);
    for i in 0..input.ps.len() {
        let _ = writeln!(stdin, "{} {}", input.ps[i].0, input.ps[i].1);
    }
    for i in 0..input.walls.len() {
        let _ = writeln!(
            stdin,
            "{} {} {} {}",
            input.walls[i].0, input.walls[i].1, input.walls[i].2, input.walls[i].3
        );
    }
    let _ = stdin.flush();
    let mut sim = Sim::new(&input);
    for _ in 0..MAX_T {
        if local {
            println!("#p {:.0} {:.0}", sim.p.0, sim.p.1);
            println!("#v {:.0} {:.0}", sim.v.0, sim.v.1);
        }
        let line = read_line(&mut stdout, local)?;
        let mut it = line.split_whitespace();
        let a = read(it.next(), 'A'..'Z')?;
        let x = read(it.next(), -100000..=100000)?;
        let y = read(it.next(), -100000..=100000)?;
        if a != 'A' && a != 'S' {
            return Err(format!("Invalid action: {}", a));
        } else if a == 'A' && x * x + y * y > 500 * 500 {
            return Err(format!("Out of range: ({}, {})", x, y));
        } else if a == 'S' && x * x + y * y > 10000000000 {
            return Err(format!("Out of range: ({}, {})", x, y));
        } else if a == 'S' && (x, y) == (0, 0) {
            return Err(format!("Out of range: ({}, {})", x, y));
        }
        let (ret, hit, d) = sim.query(&input, a, x, y);
        if d >= 0 {
            let _ = writeln!(stdin, "{}", d);
        }
        let _ = writeln!(stdin, "{} {}", ret, hit.len());
        if hit.len() > 0 {
            let _ = writeln!(stdin, "{}", hit.iter().join(" "));
        }
        let _ = stdin.flush();
        if sim.visited.iter().all(|&b| b) {
            break;
        }
    }
    p.wait().unwrap();
    Ok(sim.score)
}

use std::cmp::Ordering;
use std::ops::*;
#[derive(Clone, Copy, Default, Debug, PartialEq, PartialOrd)]
pub struct P(pub f64, pub f64);

impl Add for P {
    type Output = P;
    fn add(self, a: P) -> P {
        P(self.0 + a.0, self.1 + a.1)
    }
}

impl Sub for P {
    type Output = P;
    fn sub(self, a: P) -> P {
        P(self.0 - a.0, self.1 - a.1)
    }
}

impl Mul<f64> for P {
    type Output = P;
    fn mul(self, a: f64) -> P {
        P(self.0 * a, self.1 * a)
    }
}

impl P {
    pub fn dot(self, a: P) -> f64 {
        (self.0 * a.0) + (self.1 * a.1)
    }
    pub fn det(self, a: P) -> f64 {
        (self.0 * a.1) - (self.1 * a.0)
    }
    pub fn abs2(self) -> f64 {
        self.dot(self)
    }
}

fn sig<T>(x: T) -> i32
where
    T: Default + PartialOrd,
{
    match x.partial_cmp(&T::default()) {
        Some(Ordering::Greater) => 1,
        Some(Ordering::Less) => -1,
        _ => 0,
    }
}

impl P {
    pub fn dist2_sp((p1, p2): (P, P), q: P) -> f64 {
        if (p2 - p1).dot(q - p1) <= 0.0 {
            (q - p1).abs2()
        } else if (p1 - p2).dot(q - p2) <= 0.0 {
            (q - p2).abs2()
        } else {
            P::dist2_lp((p1, p2), q)
        }
    }
    pub fn dist2_lp((p1, p2): (P, P), q: P) -> f64 {
        let det = (p2 - p1).det(q - p1);
        det * det / (p2 - p1).abs2()
    }
    pub fn crs_sp((p1, p2): (P, P), q: P) -> bool {
        P::crs_lp((p1, p2), q) && (q - p1).dot(q - p2) <= 0.0
    }
    pub fn crs_lp((p1, p2): (P, P), q: P) -> bool {
        (p2 - p1).det(q - p1) == 0.0
    }
    pub fn crs_ss((p1, p2): (P, P), (q1, q2): (P, P)) -> bool {
        let sort = |a, b| {
            if a < b {
                (a, b)
            } else {
                (b, a)
            }
        };
        let (lp0, up0) = sort(p1.0, p2.0);
        let (lq0, uq0) = sort(q1.0, q2.0);
        let (lp1, up1) = sort(p1.1, p2.1);
        let (lq1, uq1) = sort(q1.1, q2.1);
        if up0 < lq0 || uq0 < lp0 || up1 < lq1 || uq1 < lp1 {
            return false;
        }
        return sig((p2 - p1).det(q1 - p1)) * sig((p2 - p1).det(q2 - p1)) <= 0
            && sig((q2 - q1).det(p1 - q1)) * sig((q2 - q1).det(p2 - q1)) <= 0;
    }
    pub fn pi_ll((p1, p2): (P, P), (q1, q2): (P, P)) -> Option<P> {
        let d = (q2 - q1).det(p2 - p1);
        if d == 0.0 {
            return None;
        }
        let r = p1 * d + (p2 - p1) * (q2 - q1).det(q1 - p1);
        Some(P(r.0 / d, r.1 / d))
    }
}


[問題文]
問題文
高橋くんは二次元平面上で飛行ドローンを操作し、好きな順番で 
N 箇所の目的地を訪れたいと考えている。 東西方向に 
x 軸を、南北方向に 
y 軸を取る。 飛行区域は 
2⋅10 
5
 ×2⋅10 
5
  の正方形で 
x=−10 
5
 ,x=+10 
5
 ,y=−10 
5
 ,y=+10 
5
  の4つの壁で囲まれている。 更に、これらの外周の壁以外にも内側に壁がある場合がある。

ドローンは位置 
(x,y) と速度 
(v 
x
​
 ,v 
y
​
 ) の状態を持つ。 位置と速度は常に整数値である。 位置 
(s 
x
​
 ,s 
y
​
 )、速度 
(0,0) の初期状態から開始し、毎ターン以下の2種類の操作のどちらか一方を行うことが出来る。

加速: 整数ベクトル 
(a 
x
​
 ,a 
y
​
 ) を指定し、ドローンの速度を 
(v 
x
​
 ,v 
y
​
 ) から 
(v 
x
​
 +a 
x
​
 ,v 
y
​
 +a 
y
​
 ) に変化させる。
a 
x
2
​
 +a 
y
2
​
 ≤500 
2
  を満たす必要がある。
計測: 非零の整数ベクトル 
(b 
x
​
 ,b 
y
​
 ) を指定し、現在のドローンの位置 
(x,y) から 
(b 
x
​
 ,b 
y
​
 ) 方向に最も近い壁までの距離を誤差付きで計測する。
b 
x
2
​
 +b 
y
2
​
 ≤10 
10
  を満たす必要がある。
(x,y) から 
(b 
x
​
 ,b 
y
​
 ) 方向へ半直線を延ばし(
(x+b 
x
​
 ,y+b 
y
​
 ) を通る)、最初にぶつかった壁の地点 
(x 
′
 ,y 
′
 ) までのユークリッド距離を 
d= 
(x−x 
′
 ) 
2
 +(y−y 
′
 ) 
2
 
​
  とする。得られる値は、入力で与えられるパラメータ 
δ に対し、平均 
1、標準偏差 
δ の正規分布からサンプルした値を 
α として、
round(d×α) である。ただし 
α≤0 の場合は 
α をサンプルし直す。半直線が壁の端点を通る場合はぶつかったと判定される。ただし半直線が壁と平行な場合は除く。
操作後に風の影響でドローンの速度が 
(v 
x
​
 ,v 
y
​
 ) からランダムに微少量変化する。 入力で与えられるパラメータ 
ϵ に対し、平均 
0、標準偏差 
ϵ の正規分布から2つサンプルして四捨五入したものを 
(f 
x
​
 ,f 
y
​
 ) としたとき、速度は 
(v 
x
​
 +f 
x
​
 ,v 
y
​
 +f 
y
​
 ) となる。

各ターンの最後に、その時点での速度 
(v 
x
​
 ,v 
y
​
 ) に応じて、現在位置が 
(x+v 
x
​
 ,y+v 
y
​
 ) に更新される。 ただし、二点 
(x,y) と 
(x+v 
x
​
 ,y+v 
y
​
 ) を結ぶ線分が、壁と共通部分を持つ場合(線分と壁が平行な場合も含む)、壁に衝突したとして現在位置の更新は行わず、速度を 
(0,0) に初期化する。 初期状態でドローンは壁と接していないことが保証されており、壁と衝突時は衝突前の位置に戻るため、壁に接した状態で移動が開始することはない。

壁に衝突しなかった場合、目的地への到達判定を行う。 二点 
(x,y) と 
(x+v 
x
​
 ,y+v 
y
​
 ) を結ぶ線分と、まだ訪れていない各目的地 
(p 
x
​
 ,p 
y
​
 ) との距離が 
1000 以下の場合、その目的地に到達したと判定される。 ここで、線分 
S と点 
p の距離とは、
S 上の任意の点 
q と 
p の距離を考えた時の最小値として定義される。

最大で5000ターンまで操作を行うことが出来、全ての目的地を訪れた時点で操作は即座に完了する。

得点
初期状態でスコア 
0 の状態から開始し、毎ターン以下のようにスコアが変動する。

スコアが 
2 減少する。
壁に衝突した場合は追加でスコアが 
100 減少する。複数の壁に同時に衝突した場合にも減少量は 
100 のみである。
初めて到達した目的地がある場合、1つにつき 
1000 点が得られる。
5000ターンが経過するもしくは全ての目的地を訪れた時点までのうちで、最もスコアが高かった瞬間のスコアがテストケースに対する得点となる。

一つ以上のテストケースで不正な出力や制限時間超過をした場合、提出全体の判定がやとなる。 各問題に対してコンテスト時間中に得た最高得点の総和で最終順位が決定され、コンテスト終了後のシステムテストは行われない。 同じ得点を複数の参加者が得た場合、提出時刻に関わらず同じ順位となる。

入出力
まずはじめに、以下の形式で標準入力から情報が与えられる。

N 
M 
ϵ 
δ
s 
x
​
  
s 
y
​
 
p 
x,0
​
  
p 
y,0
​
 
⋮
p 
x,N−1
​
  
p 
y,N−1
​
 
l 
x,0
​
  
l 
y,0
​
  
r 
x,0
​
  
r 
y,0
​
 
⋮
l 
x,M−1
​
  
l 
y,M−1
​
  
r 
x,M−1
​
  
r 
y,M−1
​
 
目的地の数は全ての問題において 
N=10 で固定である。
外周以外の壁の数 
M は 
0≤M≤10 を満たす。
(s 
x
​
 ,s 
y
​
 ) はドローンの初期位置を表し、
−10 
5
 <s 
x
​
 ,s 
y
​
 <10 
5
  を満たす。外周を含む壁と接していないことが保証されている。
(p 
x,i
​
 ,p 
y,i
​
 ) は 
i 番目の目的地の座標を表し、
−10 
5
 ≤p 
x,i
​
 ,p 
y,i
​
 ≤10 
5
  を満たす。目的地は壁と接している可能性がある。初期位置ならびに他の目的地との間の距離は 
5000 以上であることが保証されている。
(l 
x,i
​
 ,l 
y,i
​
 ) と 
(r 
x,i
​
 ,r 
y,i
​
 ) は 
i 番目の壁の端点の座標を表し、
−10 
5
 ≤l 
x,i
​
 ,l 
y,i
​
 ,r 
x,i
​
 ,r 
y,i
​
 ≤10 
5
  を満たす。壁は正の長さを持ち、外周以外の壁とは共通部分を持たないことが保証されている。また、外周との共通部分も1点以下であることが保証されている。これらの条件から、飛行区域内の全ての点は壁を通らずに行き来出来ることが保証される。
上記の情報を読み込んだら、以下の処理を最大で 
5000 ターン繰り返す。

加速を行う場合、加速度ベクトル 
(a 
x
​
 ,a 
y
​
 ) を、以下の形式で標準出力に出力せよ。

A 
a 
x
​
  
a 
y
​
 
計測を行う場合、計測する方向 
(b 
x
​
 ,b 
y
​
 ) を、以下の形式で標準出力に出力せよ。

S 
b 
x
​
  
b 
y
​
 
計測を行った場合のみ、計測結果を表す整数値が標準入力から一行で与えられる。

出力の後には改行をし、更に標準出力を flush しなければならない。 そうしない場合、となる可能性がある。 全ての目的地を訪問後および、
5000 回終了後のクエリに対してはジャッジプログラムは返答を行わないため、返答待ちをした場合には となる可能性があるので注意せよ。

ターンの終わりにドローンの移動結果の情報が以下の形式で標準入力から与えられる。

c 
h
q 
0
​
  
⋯ 
q 
h−1
​
 
c は壁に衝突したかどうかを表し、壁に衝突した場合は 
c=1、しなかった場合は 
c=0 である。どの壁に衝突したかの情報は得られない。 
h はこのターンに初めて訪れた目的地の数を表し、次の行の各 
q 
i
​
  が初めて訪れた目的地の番号 (
0≤q 
i
​
 ≤N−1) である。 
h=0 の場合には、
q 
i
​
  の行は空行ではなくスキップされる。

例
t	Output	Input
事前情報		
2 0 10.0 0.1
43722 -75332
79243 32532
44002 -77034
0	
A 150 -400
0 0
1	
S 0 1
168969
0 1
1
⋮		
入力生成方法
L 以上 
U 以下の整数値を一様ランダムに生成する関数を 
rand(L,U) で表す。 全ての問題で共通な部分を説明する。 各問題固有の部分については下記の「問題毎の違い」を参照せよ。

s の生成
s 
x
​
 =rand(−99999,99999)、
s 
y
​
 =rand(−99999,99999) により生成される。

p 
x,i
​
  
p 
y,i
​
  の生成
各 
i について順番に、 
p 
x,i
​
 =rand(−100000,100000)、
p 
y,i
​
 =rand(−100000,100000) により生成し、既に生成した 
s や 
(p 
x,j
​
 ,p 
y,j
​
 ) の中にユークリッド距離が 5000 以下のものがあれば生成し直す。

壁の生成
各 
i について順番に以下のように生成する。

まず、
l 
x,i
​
 =rand(−90000,90000)、
l 
y,i
​
 =rand(−90000,90000) を生成し、次に 
r 
x,i
′
​
 =l 
x,i
​
 +rand(−100000,100000)、
r 
y,i
′
​
 =l 
y,i
​
 +rand(−100000,100000) と設定する。 
(l 
x,i
​
 ,l 
y,i
​
 )=(r 
x,i
′
​
 ,r 
y,i
′
​
 ) の場合は 
i 番の壁の生成をやり直す。 
r 
x,i
′
​
  が範囲外 (
r 
x,i
′
​
 <−100000 もしくは 
100000<r 
x,i
′
​
 ) かつ、
r 
y,i
′
​
  も範囲外ならば 
i 番の壁の生成をやり直す。 そうでない場合、
r 
x,i
​
 =min(100000,max(−100000,r 
x,i
′
​
 ))、
r 
y,i
​
 =min(100000,max(−100000,r 
y,i
′
​
 )) と設定する。 この壁 
(l 
x,i
​
 ,l 
y,i
​
 )−(r 
x,i
​
 ,r 
y,i
​
 ) が既に生成した他の壁と共有点を持つ、もしくは初期位置 
(sx,sy) がこの壁上にある場合には 
i 番の壁の生成をやり直す。 そうでない場合は、
i 番の壁として採用する。

問題毎の違い
問題	テストケース数	
M	
ϵ	
δ
A	60	0	
rand(1,100)	
rand(1,20)×0.01
B	60	10	
rand(0,1)	0.01
C	80	
rand(1,10)	
rand(1,100)	
rand(1,20)×0.01
ツール(入力ジェネレータ・ローカルテスタ)
ローカルテスタ: 使用するにはRust言語のコンパイル環境をご用意下さい。
Windows用のコンパイル済みバイナリ: Rust言語の環境構築が面倒な方は代わりにこちらをご利用下さい。
コンテスト期間中に、チーム外とのビジュアライズ結果の共有や解法・考察に関する言及は禁止されています。ご注意下さい。

ツールで用いられる入出力ファイルの仕様
ローカルテスタに与える入力ファイルは事前情報の末尾に以下の形式で乱数 
α と 
(f 
x
​
 ,f 
y
​
 ) が含まれている。

α 
0
​
 
⋮
α 
4999
​
 
f 
x,0
​
  
f 
y,0
​
 
⋮
f 
x,4999
​
  
f 
y,4999
​
 
α 
t
​
  は 
t ターン目に計測を行った場合の誤差であり、
(f 
x,t
​
 ,f 
y,t
​
 ) は 
t ターン目に風の影響で変化する速度である。

解答プログラムは、# から始まるコメント行を出力に含めても良い。 ジャッジプログラムはコメント行を全て無視するため、コメント行を出力するプログラムをそのまま提出可能である。 ローカルテスタは解答プログラムの出力に追加で毎ターン初めに以下のコメント行を出力する。

#p x y
#v v_x v_y
(x,y) と 
(v 
x
​
 ,v 
y
​
 ) はそのターン開始時点におけるドローンの座標と速度である。

[ビジュアライザの仕様]
- 左下の座標が (-10^5, -10^5), 右上の座標が (10^5, 10^5) であるような二次元平面を描く。
- 目的地を赤い点で表し、壁を茶色の実線で表す。
- ドローンの現在地を青い点で表す。